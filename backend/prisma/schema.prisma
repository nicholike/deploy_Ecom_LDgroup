// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  username     String    @unique
  passwordHash String    @map("password_hash")

  // Profile
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  phone     String? @unique
  avatar    String?

  // MLM Structure
  role         UserRole   @default(F6)
  sponsorId    String?    @map("sponsor_id")
  sponsor      User?      @relation("UserSponsor", fields: [sponsorId], references: [id], onDelete: SetNull)
  downline     User[]     @relation("UserSponsor")
  referralCode String     @unique @map("referral_code")

  // Status
  status        UserStatus @default(PENDING)
  emailVerified Boolean    @default(false) @map("email_verified")
  lockedAt      DateTime?  @map("locked_at")
  lockedReason  String?    @map("locked_reason")

  // Approval Workflow
  approvedAt      DateTime? @map("approved_at")
  approvedBy      String?   @map("approved_by")
  rejectedAt      DateTime? @map("rejected_at")
  rejectedBy      String?   @map("rejected_by")
  rejectionReason String?   @map("rejection_reason") @db.Text

  // Purchase Limit (per 30 days from first order)
  quotaPeriodStart DateTime? @map("quota_period_start") // Start of current 30-day period
  
  // NEW: Size-specific quota (5ml: 300, 20ml: 300, special: unlimited)
  quota5mlLimit     Int @default(300) @map("quota_5ml_limit")
  quota5mlUsed      Int @default(0) @map("quota_5ml_used")
  quota20mlLimit    Int @default(300) @map("quota_20ml_limit")
  quota20mlUsed     Int @default(0) @map("quota_20ml_used")
  quotaSpecialLimit Int @default(999999) @map("quota_special_limit") // -1 = unlimited, but use large number for safety
  quotaSpecialUsed  Int @default(0) @map("quota_special_used")
  
  // DEPRECATED: Old total quota (kept for backwards compatibility)
  quotaLimit Int @default(300) @map("quota_limit")
  quotaUsed  Int @default(0) @map("quota_used")

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Relations
  ancestorTree   UserTree[] @relation("Ancestor")
  descendantTree UserTree[] @relation("Descendant")
  cart           Cart?
  pendingOrders  PendingOrder[]
  orders         Order[]
  commissions    Commission[]
  withdrawals    WithdrawalRequest[]
  passwordResetTokens PasswordResetToken[]
  wallet         Wallet?
  notifications  Notification[]

  // Approval tracking (admin who approved/rejected users)
  approvedByUser User?  @relation("ApprovedUsers", fields: [approvedBy], references: [id], onDelete: SetNull)
  rejectedByUser User?  @relation("RejectedUsers", fields: [rejectedBy], references: [id], onDelete: SetNull)
  usersApproved  User[] @relation("ApprovedUsers")
  usersRejected  User[] @relation("RejectedUsers")

  @@map("users")
  @@index([sponsorId])
  @@index([referralCode])
  @@index([role])
  @@index([email])
  @@index([status])
  @@index([approvedAt])
  @@index([rejectedAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("password_reset_tokens")
  @@index([userId])
  @@index([tokenHash])
}

enum UserRole {
  ADMIN
  F1
  F2
  F3
  F4
  F5
  F6
}

enum UserStatus {
  PENDING       // New user waiting for admin approval
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  REJECTED      // Registration rejected by admin
}

// MLM Tree - Closure Table for efficient tree queries
model UserTree {
  ancestor   String
  descendant String
  level      Int    @default(0)

  ancestorUser   User @relation("Ancestor", fields: [ancestor], references: [id], onDelete: Cascade)
  descendantUser User @relation("Descendant", fields: [descendant], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([ancestor, descendant])
  @@map("user_tree")
  @@index([ancestor, level])
  @@index([descendant])
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================

model Category {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String? @db.Text

  // Tree structure
  parentId String?    @map("parent_id")
  parent   Category?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryTree")

  // Media
  image String?

  // Settings
  order  Int     @default(0)
  active Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("categories")
  @@index([slug])
  @@index([parentId])
  @@index([active])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String? @db.Text

  // Pricing (for products without variants)
  price     Decimal? @db.Decimal(10, 2)
  costPrice Decimal? @map("cost_price") @db.Decimal(10, 2)
  salePrice Decimal? @map("sale_price") @db.Decimal(10, 2)

  // Inventory (for products without variants)
  sku               String? @unique
  stock             Int?    @default(0)
  lowStockThreshold Int?    @default(10) @map("low_stock_threshold")

  // Commission
  isCommissionEligible Boolean @default(true) @map("is_commission_eligible")

  // Special Product
  isSpecial Boolean @default(false) @map("is_special")

  // Media
  images    Json?    @db.Json  // Store as JSON array
  thumbnail String?

  // Category
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // Status
  status ProductStatus @default(DRAFT)

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description") @db.Text

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  variants   ProductVariant[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
  @@index([slug])
  @@index([categoryId])
  @@index([status])
  @@index([sku])
}

model ProductVariant {
  id        String  @id @default(uuid())
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Variant info
  size String // "5ml", "20ml", "50ml"
  sku  String @unique

  // Pricing
  price     Decimal  @db.Decimal(10, 2)
  costPrice Decimal? @map("cost_price") @db.Decimal(10, 2)
  salePrice Decimal? @map("sale_price") @db.Decimal(10, 2)

  // Inventory
  stock             Int @default(0)
  lowStockThreshold Int @default(10) @map("low_stock_threshold")

  // Settings
  isDefault Boolean @default(false) @map("is_default")
  order     Int     @default(0)
  active    Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cartItems  CartItem[]
  orderItems OrderItem[]
  priceTiers PriceTier[]

  @@map("product_variants")
  @@index([productId])
  @@index([sku])
  @@index([active])
}

// Price Tiers for quantity-based discounts
model PriceTier {
  id        String  @id @default(uuid())

  // Link to product variant
  productVariantId String         @map("product_variant_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  // Quantity range
  minQuantity Int @map("min_quantity") // Example: 10
  maxQuantity Int? @map("max_quantity") // Example: 99 (null = unlimited)

  // Price for this tier
  price Decimal @db.Decimal(10, 2)

  // Display
  label String? // Example: "Mua 10 giáº£m 10%"
  order Int @default(0)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("price_tiers")
  @@index([productVariantId])
  @@index([minQuantity])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  OUT_OF_STOCK
  DISCONTINUED
}

// ============================================
// CART MANAGEMENT
// ============================================

model Cart {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  items CartItem[]

  @@map("carts")
  @@index([userId])
}

model CartItem {
  id String @id @default(uuid())

  // Cart
  cartId String @map("cart_id")
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // Product (always present)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Product Variant (optional - only if selecting a specific variant)
  productVariantId String?         @map("product_variant_id")
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  // Details
  quantity Int @default(1)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart_items")
  @@index([cartId])
  @@index([productId])
  @@index([productVariantId])
  @@unique([cartId, productId, productVariantId])
}

// ============================================
// ORDER MANAGEMENT
// ============================================

// PendingOrder - Temporary storage for checkout before payment
model PendingOrder {
  id            String   @id @default(uuid())
  pendingNumber String   @unique @map("pending_number") // Format: PD25XXXXXXXXX

  // Customer
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Cart snapshot (JSON)
  items Json // Snapshot of cart items with pricing

  // Pricing
  subtotal    Decimal @db.Decimal(18, 2)
  shippingFee Decimal @default(0) @map("shipping_fee") @db.Decimal(18, 2)
  tax         Decimal @default(0) @db.Decimal(18, 2)
  discount    Decimal @default(0) @db.Decimal(18, 2)
  totalAmount Decimal @map("total_amount") @db.Decimal(18, 2)

  // Shipping info
  shippingAddress Json? @map("shipping_address")
  shippingMethod  String? @map("shipping_method")

  // Payment
  paymentMethod String? @map("payment_method")

  // Notes
  customerNote String? @map("customer_note") @db.Text

  // Status
  status PendingOrderStatus @default(AWAITING_PAYMENT)

  // Link to created order (after payment confirmed)
  orderId String? @unique @map("order_id")
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  // Expiry (auto-cancel after 30 minutes)
  expiresAt DateTime @map("expires_at")

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  paidAt      DateTime? @map("paid_at")
  cancelledAt DateTime? @map("cancelled_at")

  @@map("pending_orders")
  @@index([userId])
  @@index([pendingNumber])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
}

enum PendingOrderStatus {
  AWAITING_PAYMENT // Waiting for payment
  PAID             // Payment confirmed, order created
  EXPIRED          // Expired without payment
  CANCELLED        // Cancelled by user or system
}

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique @map("order_number")

  // Customer
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Pricing
  subtotal    Decimal @db.Decimal(18, 2)
  shippingFee Decimal @default(0) @map("shipping_fee") @db.Decimal(18, 2)
  tax         Decimal @default(0) @db.Decimal(18, 2)
  discount    Decimal @default(0) @db.Decimal(18, 2)
  totalAmount Decimal @map("total_amount") @db.Decimal(18, 2)

  // Status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")

  // Shipping
  shippingAddress Json?   @map("shipping_address")
  shippingMethod  String? @map("shipping_method")
  trackingNumber  String? @map("tracking_number")

  // Payment
  paymentMethod  String?   @map("payment_method")
  paymentGateway String?   @map("payment_gateway")
  transactionId  String?   @map("transaction_id")
  paidAt         DateTime? @map("paid_at")

  // Notes
  customerNote String? @map("customer_note") @db.Text
  adminNote    String? @map("admin_note") @db.Text

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")
  cancelledAt DateTime? @map("cancelled_at")

  // Relations
  pendingOrder     PendingOrder?
  items            OrderItem[]
  commissions      Commission[]
  bankTransactions BankTransaction[]

  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  COMPLETED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id String @id @default(uuid())

  // Order
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product (always present)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  // Product Variant (optional - only if ordered a specific variant)
  productVariantId String?         @map("product_variant_id")
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Restrict)

  // Variant info snapshot (stored for history)
  variantSize String? @map("variant_size") // "5ml", "20ml", "50ml"

  // Details
  quantity   Int
  price      Decimal @db.Decimal(18, 2) // Price at time of purchase
  subtotal   Decimal @db.Decimal(18, 2) // quantity * price
  isFreeGift Boolean @default(false) @map("is_free_gift") // Free gift promotion (price = 0, no quota)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
  @@index([productVariantId])
}

// ============================================
// COMMISSION MANAGEMENT
// ============================================

model CommissionConfig {
  id    String @id @default(uuid())
  level Int    @unique // 1, 2, 3, 4

  // Commission settings
  commissionRate Decimal @map("commission_rate") @db.Decimal(5, 2) // e.g., 10.00 for 10%
  commissionType String  @default("PERCENTAGE") @map("commission_type")

  // Constraints
  minOrderValue Decimal? @map("min_order_value") @db.Decimal(10, 2)
  maxCommission Decimal? @map("max_commission") @db.Decimal(10, 2)

  // Status
  active        Boolean   @default(true)
  effectiveFrom DateTime  @default(now()) @map("effective_from")
  effectiveTo   DateTime? @map("effective_to")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("commission_configs")
  @@index([level, active])
}

model Commission {
  id String @id @default(uuid())

  // User receiving commission
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Order that generated commission
  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Restrict)

  // Downline user who made the purchase
  fromUserId String @map("from_user_id")

  // MLM Level (1=F1, 2=F2, 3=F3, 4=F4)
  level Int

  // Calculation
  orderValue       Decimal @map("order_value") @db.Decimal(18, 2)
  commissionRate   Decimal @map("commission_rate") @db.Decimal(5, 2)
  commissionAmount Decimal @map("commission_amount") @db.Decimal(18, 2)

  // Period (format: YYYY-MM)
  period String

  // Status
  status CommissionStatus @default(PENDING)

  // Notes
  notes String? @db.Text

  // Timestamps
  calculatedAt DateTime  @default(now()) @map("calculated_at")
  approvedAt   DateTime? @map("approved_at")
  rejectedAt   DateTime? @map("rejected_at")
  paidAt       DateTime? @map("paid_at")

  @@map("commissions")
  @@unique([orderId, userId, level], name: "unique_commission_order_user_level")
  @@index([userId, period])
  @@index([orderId])
  @@index([status])
  @@index([period])
  @@index([fromUserId])
}

enum CommissionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

model WithdrawalRequest {
  id String @id @default(uuid())

  // User requesting withdrawal
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  // Amount
  amount Decimal @db.Decimal(10, 2)

  // Bank information (stored as JSON)
  bankInfo Json @map("bank_info")
  // Example: { "bankName": "Vietcombank", "accountNumber": "0123456789", "accountName": "NGUYEN VAN A", "branch": "HCM" }

  // Status
  status WithdrawalStatus @default(PENDING)

  // Processing
  processedBy String?   @map("processed_by") // Admin user ID
  processedAt DateTime? @map("processed_at")
  completedAt DateTime? @map("completed_at") // When money transferred

  // Notes
  userNote    String? @map("user_note") @db.Text
  adminNote   String? @map("admin_note") @db.Text
  rejectReason String? @map("reject_reason") @db.Text // Why rejected

  // Timestamps
  requestedAt DateTime @default(now()) @map("requested_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("withdrawal_requests")
  @@index([userId])
  @@index([status])
  @@index([requestedAt])
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

// ============================================
// WALLET MANAGEMENT
// ============================================

model Wallet {
  id      String  @id @default(uuid())
  userId  String  @unique @map("user_id")
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance Decimal @default(0) @db.Decimal(18, 2) // Can be negative

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  transactions WalletTransaction[]

  @@map("wallets")
  @@index([userId])
  @@index([balance]) // To find negative balances for admin warning
}

model WalletTransaction {
  id       String @id @default(uuid())
  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  // Transaction details
  type        WalletTransactionType
  amount      Decimal               @db.Decimal(18, 2) // Positive or negative
  balanceBefore Decimal             @map("balance_before") @db.Decimal(18, 2)
  balanceAfter  Decimal             @map("balance_after") @db.Decimal(18, 2)

  // References (optional, depends on transaction type)
  orderId      String? @map("order_id")
  commissionId String? @map("commission_id")
  withdrawalId String? @map("withdrawal_id")

  description String?
  metadata    Json? // Additional data if needed

  createdAt DateTime @default(now()) @map("created_at")

  @@map("wallet_transactions")
  @@index([walletId])
  @@index([type])
  @@index([orderId])
  @@index([commissionId])
  @@index([withdrawalId])
  @@index([createdAt])
}

enum WalletTransactionType {
  COMMISSION_EARNED // +money when order completed
  COMMISSION_REFUND // -money when order cancelled
  WITHDRAWAL        // -money when withdrawal completed
  ADMIN_ADJUSTMENT  // Manual adjustment by admin (+ or -)
  ORDER_REFUND      // +money when paid order cancelled
}

// ============================================
// SYSTEM SETTINGS
// ============================================

model SystemSetting {
  id    String @id @default(uuid())
  key   String @unique // e.g., "default_quota_limit", "shipping_fee", "min_withdrawal_amount"
  value String @db.Text // JSON string for complex values
  type  String @default("STRING") // STRING, NUMBER, BOOLEAN, JSON, EMAIL_TEMPLATE
  
  category    String  @default("GENERAL") // GENERAL, COMMISSION, EMAIL, BANK, SHIPPING
  label       String // Human-readable label
  description String? @db.Text
  
  // Validation
  required Boolean @default(false)
  editable Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("system_settings")
  @@index([category])
  @@index([key])
}

// ============================================
// NOTIFICATION SYSTEM
// ============================================

model Notification {
  id     String @id @default(uuid())
  
  // User receiving notification
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Content
  type    NotificationType
  title   String
  message String           @db.Text
  
  // Action link (optional)
  actionUrl  String? @map("action_url")
  actionText String? @map("action_text")
  
  // Metadata (optional JSON for additional data)
  metadata Json?
  
  // Status
  read   Boolean   @default(false)
  readAt DateTime? @map("read_at")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("notifications")
  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([type])
}

enum NotificationType {
  ORDER_CREATED        // ÄÆ¡n hÃ ng má»i ÄÆ°á»£c táº¡o
  ORDER_CONFIRMED      // ÄÆ¡n hÃ ng ÄÆ°á»£c xÃ¡c nháº­n
  ORDER_SHIPPED        // ÄÆ¡n hÃ ng Äang giao
  ORDER_DELIVERED      // ÄÆ¡n hÃ ng ÄÃ£ giao
  ORDER_CANCELLED      // ÄÆ¡n hÃ ng bá» há»§y
  
  COMMISSION_EARNED    // Nháº­n ÄÆ°á»£c hoa há»ng
  COMMISSION_PAID      // Hoa há»ng ÄÆ°á»£c thanh toÃ¡n
  
  WITHDRAWAL_REQUESTED // YÃªu cáº§u rÃºt tiá»n má»i
  WITHDRAWAL_APPROVED  // YÃªu cáº§u rÃºt tiá»n ÄÆ°á»£c duyá»t
  WITHDRAWAL_REJECTED  // YÃªu cáº§u rÃºt tiá»n bá» tá»« chá»i
  WITHDRAWAL_COMPLETED // RÃºt tiá»n thÃ nh cÃ´ng
  
  NEW_DOWNLINE         // CÃ³ F1 má»i
  ACCOUNT_LOCKED       // TÃ i khoáº£n bá» khÃ³a
  ACCOUNT_UNLOCKED     // TÃ i khoáº£n ÄÆ°á»£c má» khÃ³a
  ACCOUNT_APPROVED     // TÃ i khoáº£n ÄÆ°á»£c phÃª duyá»t
  ACCOUNT_REJECTED     // TÃ i khoáº£n bá» tá»« chá»i

  SYSTEM_ANNOUNCEMENT  // ThÃ´ng bÃ¡o há» thá»ng
  PROMOTION            // Khuyáº¿n mÃ£i

  PAYMENT_RECEIVED     // Nháº­n ÄÆ°á»£c thanh toÃ¡n
  PAYMENT_CONFIRMED    // Thanh toÃ¡n ÄÆ°á»£c xÃ¡c nháº­n
}

// ============================================
// PAYMENT & BANK TRANSACTIONS
// ============================================

model BankTransaction {
  id String @id @default(uuid())
  
  // SePay transaction info
  sepayTransactionId String?  @unique @map("sepay_transaction_id")
  gateway            String   // VCB, ACB, BIDV, etc.
  transactionDate    DateTime @map("transaction_date")
  
  // Bank account info
  accountNumber String  @map("account_number")
  subAccount    String? @map("sub_account")
  
  // Amount info
  amountIn    Decimal @map("amount_in") @db.Decimal(18, 2)
  amountOut   Decimal @map("amount_out") @db.Decimal(18, 2)
  accumulated Decimal @map("accumulated") @db.Decimal(18, 2)
  
  // Transaction details
  code               String? @db.Text
  transactionContent String  @map("transaction_content") @db.Text
  referenceNumber    String? @map("reference_number")
  body               String? @db.Text // Raw webhook data
  
  // Link to order (optional)
  orderId String? @map("order_id")
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  // Processing status
  processed   Boolean   @default(false)
  processedAt DateTime? @map("processed_at")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("bank_transactions")
  @@index([orderId])
  @@index([gateway])
  @@index([accountNumber])
  @@index([transactionDate])
  @@index([processed])
  @@index([transactionContent(length: 191)])
}
